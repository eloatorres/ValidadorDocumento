package atv.Compiladores.service;

import org.springframework.stereotype.Service;

@Service
public class ValidadorDocumento {

    public boolean validarDocumento(String tipo, String documento) {
        if (tipo.equalsIgnoreCase("cpf")) {
            return validarCPF(documento);
        } else if (tipo.equalsIgnoreCase("rg")) {
            return validarRG(documento);
        }
        return false;
    }

    private boolean validarCPF(String cpf) {
        cpf = cpf.replaceAll("[^0-9]", "");

        if (cpf.length() != 11) {
            return false;
        }

        // Verifica se todos os dígitos são iguais (caso inválido)
        if (cpf.matches("(\\d)\\1{10}")) {
            return false;
        }

        // Cálculo do primeiro dígito verificador
        int soma = 0;
        for (int i = 0; i < 9; i++) {
            soma += (cpf.charAt(i) - '0') * (10 - i);
        }
        int primeiroDigito = (soma % 11 < 2) ? 0 : (11 - (soma % 11));

        // Cálculo do segundo dígito verificador
        soma = 0;
        for (int i = 0; i < 10; i++) {
            soma += (cpf.charAt(i) - '0') * (11 - i);
        }
        int segundoDigito = (soma % 11 < 2) ? 0 : (11 - (soma % 11));

        return cpf.charAt(9) == (char) (primeiroDigito + '0') && 
               cpf.charAt(10) == (char) (segundoDigito + '0');
    }

    private boolean validarRG(String rg) {
    // Remove caracteres não numéricos
    rg = rg.replaceAll("[^0-9]", "");

    // O RG deve ter exatamente 9 dígitos
    if (rg.length() != 9) {
        return false;
    }

    // Definição do autômato
    enum Estado { q0, q1, q2, q3, q4, q5, q6, q7, q8, qf }
    Estado estado = Estado.q0;

    for (char c : rg.toCharArray()) {
        // Apenas transições baseadas em 9 dígitos numéricos
        switch (estado) {
            case q0:
                estado = Estado.q1;
                break;
            case q1:
                estado = Estado.q2;
                break;
            case q2:
                estado = Estado.q3;
                break;
            case q3:
                estado = Estado.q4;
                break;
            case q4:
                estado = Estado.q5;
                break;
            case q5:
                estado = Estado.q6;
                break;
            case q6:
                estado = Estado.q7;
                break;
            case q7:
                estado = Estado.q8;
                break;
            case q8:
                estado = Estado.qf;
                break;
            default:
                break;
        }
    }

    // Se o autômato chegou ao estado final qf, o RG é válido
    return estado == Estado.qf;
}
}

